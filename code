#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>

// Pin configuration
#define TRIG_PIN 9
#define ECHO_PIN 10
#define SERVO_PIN 6

// LCD setup (0x27 or 0x3F are common I2C addresses, adjust if needed)
LiquidCrystal_I2C lcd(0x27, 16, 2);
Servo lidServo;

long duration;
int distance;

void setup() {
  // Initialize serial monitor
  Serial.begin(9600);

  // Initialize pins
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Initialize servo
  lidServo.attach(SERVO_PIN);
  lidServo.write(0); // Start with lid closed

  // Initialize LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print(" Automated Bin ");
  lcd.setCursor(0, 1);
  lcd.print("   Initializing ");
  delay(2000);
  lcd.clear();
}

void loop() {
  distance = getDistance();

  // Show status on LCD
  if (distance > 0 && distance < 20) {  // If object is close
    lcd.setCursor(0, 0);
    lcd.print("Object Detected");
    lcd.setCursor(0, 1);
    lcd.print("Opening Lid... ");
    
    lidServo.write(90);  // Open lid
    delay(3000);         // Keep lid open for 3 sec
    
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Closing Lid...");
    lidServo.write(0);   // Close lid
    delay(1000);
    lcd.clear();
  } else {
    lcd.setCursor(0, 0);
    lcd.print("   Waiting...   ");
    lcd.setCursor(0, 1);
    lcd.print(" Place trash in ");
    lidServo.write(0);   // Ensure lid closed
  }

  delay(200); // Small delay for stable readings
}

int getDistance() {
  // Send ultrasonic pulse
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  // Measure echo pulse duration
  duration = pulseIn(ECHO_PIN, HIGH);

  // Convert to distance in cm
  int dist = duration * 0.034 / 2;
  return dist;
}
